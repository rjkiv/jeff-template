# Path to the xex file.
object: default.xex

# (optional) If set, all object paths will be relative to this directory.
# If not set, all object paths will be relative to the root of the project.
object_base: orig/GAMEID

# (optional) Path to the symbols.txt file.
# This file will be created if it does not exist.
# See docs/symbols.md for more information.
symbols: config/GAMEID/symbols.txt
# (optional) Path to the splits.txt file.
# This file will be created if it does not exist.
# See docs/splits.md for more information.
splits: config/GAMEID/splits.txt

# (optional) Path to the DOL's .map file.
# This path is relative to the root of the project, and is _not_ affected by `object_base`.
# This should only used for initial analysis, and generating the symbols and splits files.
# Once those files are generated, remove this to avoid conflicts.
map: orig/GAMEID/files/main.MAP

# (optional) When enabled, function boundary analysis will be skipped.
# Only valid _after_ initial analysis has been performed and
# the symbols and splits files have been generated. 
quick_analysis: false

# (optional) When enabled, the analyzer will attempt to detect sizes
# and data types of objects based on code usage and alignment.
detect_objects: true

# (optional) When enabled, the analyzer will attempt to detect strings,
# wide strings, and string tables.
detect_strings: true

# (optional) Whether to write disassembly to the split output directory.
# While not used in the build process, the disassembly is useful
# for reading and usage with other tools, like decomp.me.
write_asm: true

# (optional) If symbols are _fully_ known (e.g. from a complete map file),
# this can be set to true to skip most analysis steps, and ensure new
# symbols are not created by the analyzer.
# If you're not sure, leave this false.
symbols_known: false

# (optional) Whether to create `gap_` symbols to prevent the linker from
# adjusting the alignment / address of symbols.
# When alignments are fully known (e.g. from a complete map file),
# this can be set to false.
fill_gaps: true

# (optional) Block relocations from or to specific addresses.
# For modules, this goes in the module's configuration above.
block_relocations:

# Block any relocation pointing _to_ this address.
- target: .data:0x80130140

# Block any relocation originating _from_ this address.
- source: .text:0x80047160
  # (optional) End address to make it a range.
  end: .text:0x800471A8

# (optional) Add or replace relocations if they were detected incorrectly.
# For modules, this goes in the module's configuration above.
add_relocations:

# From: `subi r3, r3, 0x7657`
# To: `li r3, mesWInsert-0x1@sda21`
- source: .text:0x800473F4
  type: sda21
  target: mesWInsert # Supports `symbol` or `symbol!.section:0x80001234`
  addend: -1
